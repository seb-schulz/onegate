package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"encoding/base64"
	"fmt"

	"github.com/seb-schulz/onegate/graph/model"
	"github.com/seb-schulz/onegate/internal/jwt"
	"github.com/seb-schulz/onegate/internal/middleware"
	dbmodel "github.com/seb-schulz/onegate/internal/model"
	"github.com/spf13/viper"
	"gorm.io/gorm"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context) (bool, error) {
	session := middleware.SessionFromContext(ctx)
	if session == nil {
		return false, fmt.Errorf("session is missing")
	}

	if session.UserID != nil {
		return false, fmt.Errorf("currently logged in with an user")
	}

	user := dbmodel.User{}
	if err := r.DB.Transaction(func(tx *gorm.DB) error {
		tx.Create(&user)
		tx.Model(&session).Update("user_id", user.ID)
		return nil
	}); err != nil {
		panic(err)
	}

	return true, nil
}

// CreateCredentialOptions is the resolver for the createCredentialOptions field.
func (r *queryResolver) CreateCredentialOptions(ctx context.Context) (*model.CreateCredentialOptions, error) {
	return &model.CreateCredentialOptions{
		Challenge: mustRandomEncodedBytes(32),
		Rp: model.RelyingParty{
			Name: viper.GetString("rp.name"),
			ID:   viper.GetString("rp.id"),
		},
		PubKeyCredParams: []*model.PubKeyCredParam{
			{Alg: -7, Type: "public-key"},
			{Alg: -257, Type: "public-key"},
		},
		UserID: mustRandomEncodedBytes(16),
	}, nil
}

// RedeemToken is the resolver for the redeemToken field.
func (r *queryResolver) RedeemToken(ctx context.Context) (string, error) {
	// TODO: Check for user type via context
	return jwt.GenerateJwtToken(jwt.AnonymousUser)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	session := middleware.SessionFromContext(ctx)
	if session == nil {
		return nil, fmt.Errorf("session is missing")
	}

	if session.UserID == nil {
		return nil, nil
	}

	return &model.User{PasskeyID: base64.StdEncoding.EncodeToString([]byte(session.User.PasskeyID))}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
