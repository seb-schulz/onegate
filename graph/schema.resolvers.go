package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"bytes"
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/go-webauthn/webauthn/protocol"
	"github.com/go-webauthn/webauthn/webauthn"
	"github.com/google/uuid"
	dbmodel "github.com/seb-schulz/onegate/internal/model"
	"gorm.io/gorm"
)

// ID is the resolver for the ID field.
func (r *credentialResolver) ID(ctx context.Context, obj *dbmodel.Credential) (string, error) {
	return fmt.Sprintf("%d", obj.ID), nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string) (*protocol.CredentialCreation, error) {
	defer time.Sleep(2 * time.Second)

	if !r.UserRegistrationEnabled {
		return nil, fmt.Errorf("feature disabled")
	}

	if user := r.UserMgr.FromContext(ctx); user != nil {
		return nil, fmt.Errorf("currently logged in with an user")
	}

	user, err := dbmodel.CreateUser(ctx, name)
	if err != nil {
		return nil, err
	}
	return r.beginRegistration(ctx, user)
}

// UpdateMe is the resolver for the updateMe field.
func (r *mutationResolver) UpdateMe(ctx context.Context, name *string, displayName *string) (*dbmodel.User, error) {
	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("user not logged in")
	}

	if name != nil && len(*name) < 1 && len(*name) > 255 {
		return nil, fmt.Errorf("length of name must be between 1 and 255 letters")
	}

	if displayName != nil && len(*displayName) < 1 && len(*displayName) > 255 {
		return nil, fmt.Errorf("length of display name must be between 1 and 255 letters")
	}

	if err := r.DB.Transaction(func(tx *gorm.DB) error {
		if name != nil {
			user.Name = *name
		}

		if displayName != nil {
			user.DisplayName = *displayName
		}

		tx.Save(&user)
		return nil
	}); err != nil {
		return nil, fmt.Errorf("user cannot be saved: %v", err)
	}

	return user, nil
}

// InitCredential is the resolver for the initCredential field.
func (r *mutationResolver) InitCredential(ctx context.Context) (*protocol.CredentialCreation, error) {
	defer time.Sleep(2 * time.Second)

	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("user not logged in")
	}

	return r.beginRegistration(ctx, user)
}

// AddPasskey is the resolver for the addPasskey field.
func (r *mutationResolver) AddCredential(ctx context.Context, body string) (bool, error) {
	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return false, fmt.Errorf("user not logged in")
	}

	auth_session, err := dbmodel.FirstAuthSession(ctx)
	if err != nil {
		return false, fmt.Errorf("registration failed")
	}

	parsedResponse, err := protocol.ParseCredentialCreationResponseBody(strings.NewReader(body))
	if err != nil {
		return false, err
	}
	cred, err := r.WebAuthn.CreateCredential(user, auth_session.Value(), parsedResponse)
	if err != nil {
		return false, err
	}

	if err := r.DB.Transaction(func(tx *gorm.DB) error {
		tx.Create(&dbmodel.Credential{UserID: user.ID, Data: *cred})
		tx.Delete(&auth_session)
		return nil
	}); err != nil {
		panic(err)
	}

	return true, nil
}

// UpdateCredential is the resolver for the updateCredential field.
func (r *mutationResolver) UpdateCredential(ctx context.Context, id string, description *string) (*dbmodel.Credential, error) {
	if description == nil {
		return nil, fmt.Errorf("no mutation required")
	}

	if len(*description) > 255 {
		return nil, fmt.Errorf("length of description must be less or equal 255 characters")
	}
	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("user not logged in")
	}

	cred, err := dbmodel.CredentialByUserID(r.DB, user.ID, id)
	if err != nil {
		return nil, err
	}
	cred.Description = *description
	r.DB.Save(&cred)

	return cred, nil
}

// RemoveCredential is the resolver for the removeCredential field.
func (r *mutationResolver) RemoveCredential(ctx context.Context, id string) (bool, error) {
	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return false, fmt.Errorf("user not logged in")
	}

	if dbmodel.CountCredentialByUserID(r.DB, user.ID) <= 1 {
		return false, fmt.Errorf("cannot delete last remaining credential")
	}

	cred, err := dbmodel.CredentialByUserID(r.DB, user.ID, id)
	if err != nil {
		return false, err
	}

	r.DB.Delete(&cred)
	return true, nil
}

// BeginLogin is the resolver for the beginLogin field.
func (r *mutationResolver) BeginLogin(ctx context.Context) (*protocol.CredentialAssertion, error) {
	defer time.Sleep(2 * time.Second)
	user := r.UserMgr.FromContext(ctx)
	if user != nil {
		return nil, fmt.Errorf("user is logged-in")
	}

	cred, webauthn_session, err := r.WebAuthn.BeginDiscoverableLogin()
	if err != nil {
		return nil, err
	}

	if err := dbmodel.CreateAuthSession(ctx, webauthn_session); err != nil {
		return nil, fmt.Errorf("cannot start login: %v", err)
	}

	return cred, nil
}

// ValidateLogin is the resolver for the validateLogin field.
func (r *mutationResolver) ValidateLogin(ctx context.Context, body string) (bool, error) {
	defer time.Sleep(2 * time.Second)

	if user := r.UserMgr.FromContext(ctx); user != nil {
		return false, fmt.Errorf("user is logged-in")
	}

	auth_session, err := dbmodel.FirstAuthSession(ctx)
	if err != nil {
		return false, fmt.Errorf("login failed")
	}

	parsedResponse, err := protocol.ParseCredentialRequestResponseBody(strings.NewReader(body))
	if err != nil {
		return false, fmt.Errorf("login failed")
	}

	user := dbmodel.User{}
	db_cred := dbmodel.Credential{}

	cred, err := r.WebAuthn.ValidateDiscoverableLogin(func(rawID, userHandle []byte) (webauthn.User, error) {
		if result := r.DB.Preload("Credentials").First(&user, "authn_id = ?", userHandle); result.Error != nil {
			return nil, fmt.Errorf("login failed")
		}

		for _, c := range user.Credentials {
			if bytes.Equal(c.Data.ID, rawID) {
				db_cred = c
				return &user, nil
			}
		}

		return nil, fmt.Errorf("login failed")
	}, auth_session.Value(), parsedResponse)
	if err != nil {
		return false, fmt.Errorf("login failed")
	}

	now := time.Now()
	db_cred.Data = *cred
	db_cred.LastLogin = &now

	if err := r.DB.Transaction(func(tx *gorm.DB) error {
		tx.Delete(&auth_session)

		if err := dbmodel.LoginUser(ctx, dbmodel.LoginOpt{Credential: &db_cred, Tx: tx}); err != nil {
			return fmt.Errorf("login failed")
		}

		return nil
	}); err != nil {
		panic(err)
	}

	return true, nil
}

// RemoveSession is the resolver for the removeSession field.
func (r *mutationResolver) RemoveSession(ctx context.Context, id string) (bool, error) {
	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return false, fmt.Errorf("user not logged in")
	}

	sID, err := uuid.Parse(id)
	if err != nil {
		return false, fmt.Errorf("id has invalid format: %v", err)
	}

	if err := r.DB.Transaction(dbmodel.DeleteSessionByUserID(user.ID, sID)); err != nil {
		return false, err
	}

	return true, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*dbmodel.User, error) {
	user := r.UserMgr.FromContext(ctx)
	return user, nil // ignore error to dedect logged-out scenario
}

// Credentials is the resolver for the credentials field.
func (r *queryResolver) Credentials(ctx context.Context) ([]*dbmodel.Credential, error) {
	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("user not logged in")
	}

	creds := []*dbmodel.Credential{}
	if result := r.DB.Where("user_id = ?", user.ID).Find(&creds); result.Error != nil {
		return nil, result.Error
	}

	return creds, nil
}

// Sessions is the resolver for the sessions field.
func (r *queryResolver) Sessions(ctx context.Context) ([]*dbmodel.Session, error) {
	user := r.UserMgr.FromContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("user not logged in")
	}

	return dbmodel.AllSessionByUserID(r.DB, user.ID)
}

// ID is the resolver for the id field.
func (r *sessionResolver) ID(ctx context.Context, obj *dbmodel.Session) (string, error) {
	return fmt.Sprint(obj.ID), nil
}

// Credential returns CredentialResolver implementation.
func (r *Resolver) Credential() CredentialResolver { return &credentialResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Session returns SessionResolver implementation.
func (r *Resolver) Session() SessionResolver { return &sessionResolver{r} }

type credentialResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type sessionResolver struct{ *Resolver }
